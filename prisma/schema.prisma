generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model feedback {
  id            String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customer_id   String      @db.Uuid
  restaurant_id String      @db.Uuid
  rating        Int
  comment       String?     @db.VarChar(255)
  users         users       @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurants   restaurants @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model menu_categories {
  id            String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String       @db.VarChar(255)
  restaurant_id String       @db.Uuid
  restaurants   restaurants  @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  menu_items    menu_items[]
}

model menu_items {
  id              String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String          @db.VarChar(255)
  description     String?         @db.VarChar(255)
  price           Int
  category_id     String          @db.Uuid
  menu_categories menu_categories @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_items     order_items[]
}

model order_items {
  id           String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  order_id     String     @db.Uuid
  menu_item_id String     @db.Uuid
  quantity     Int
  menu_items   menu_items @relation(fields: [menu_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders       orders     @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model orders {
  id               String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customer_id      String        @db.Uuid
  restaurant_id    String        @db.Uuid
  order_time       DateTime      @db.Timestamp(6)
  special_requests String?       @db.VarChar(255)
  order_items      order_items[]
  users            users         @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurants      restaurants   @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reservations {
  id               String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customer_id      String      @db.Uuid
  restaurant_id    String      @db.Uuid
  reservation_time DateTime    @db.Timestamp(6)
  table_number     Int
  users            users       @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurants      restaurants @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model restaurants {
  id                  String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                String            @db.VarChar(255)
  location            String            @db.VarChar(255)
  contact_information String            @db.VarChar(255)
  operating_hours     String            @db.VarChar(255)
  owner_id            String            @db.Uuid
  feedback            feedback[]
  menu_categories     menu_categories[]
  orders              orders[]
  reservations        reservations[]
  users               users             @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  staff_members       staff_members[]
}

model staff_members {
  id            String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String      @db.Uuid
  restaurant_id String      @db.Uuid
  work_schedule String      @db.VarChar(255)
  restaurants   restaurants @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                  String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  role                String          @db.VarChar(255)
  contact_information String          @db.VarChar(255)
  feedback            feedback[]
  orders              orders[]
  reservations        reservations[]
  restaurants         restaurants[]
  staff_members       staff_members[]
}
